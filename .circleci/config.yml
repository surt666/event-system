# Clojure CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-clojure/ for more details
#

defaults: &defaults
  working_directory: ~/repo

version: 2
jobs:
  build:
    <<: *defaults
    docker:
      # specify the version you desire here
      - image: circleci/clojure:lein-2.7.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    environment:
      LEIN_ROOT: "true"
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "project.clj" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: lein deps

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "project.clj" }}

      # build jar
      - run: lein uberjar

      - run: mkdir -p artifact/target

      - run: echo 'export V=`cat project.clj | head -n 1 | grep -oE "\"(.+)+$" | tr -d \\"\"\\"`' >> $BASH_ENV

      - run: echo "export A=target/event-system-$V-standalone.jar" >> $BASH_ENV

      - run: cp $A artifact/target

      - run: cp sam.yaml artifact

      - run: echo "export V=$V;export JAR=$A" > artifact/version

      - persist_to_workspace:
          root: artifact
          paths:
            - sam.yaml
            - version
            - target/*

  deploy:
    <<: *defaults
    docker:
      - image: wilson208/circleci-awscli # mesosphere/aws-cli

    steps:
      - attach_workspace:
          at: /tmp/artifact

      # build stack
      # - run: aws cloudformation package --template-file /tmp/artifact/sam.yaml --s3-bucket dk.vurdst.ice.artifacts --output-template-file packaged-template.yaml

      - run: cat /tmp/artifact/version >> $BASH_ENV

      - run: echo 'export EXISTS=`aws s3 ls "s3://dk.vurdst.ice.artifacts/event-system-$V-standalone.jar"`' >> $BASH_ENV

      - run:
          command: |
            if [ -z "$EXISTS" ]; then
              aws s3 cp /tmp/artifact/target/event-system-$V-standalone.jar s3://dk.vurdst.ice.artifacts
            else
              echo "Version exists already"
            fi

      - run: aws cloudformation deploy --template-file /tmp/artifact/sam.yaml --stack-name EventSystem --capabilities CAPABILITY_IAM --region eu-west-1 --parameter-overrides Stage=dev Bucket=dk.vurdst.ice.artifacts Key="event-system-$V-standalone.jar" Role=arn:aws:iam::593176282530:role/lambda-s3-execution-role

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
